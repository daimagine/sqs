{"version":3,"sources":["sqs.js"],"names":[],"mappings":";;;;;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAGqB,G;;;;;;;AAMjB,mBAA6F;AAAA,YAAjF,MAAiF,yDAAxE,MAAwE;AAAA,YAAhE,MAAgE,yDAAvD,aAAuD;;AAAA,yEAAJ,EAAI;;AAAA,4BAAtC,GAAsC;AAAA,YAAtC,GAAsC,4BAAhC,EAAgC;AAAA,oCAA5B,WAA4B;AAAA,YAA5B,WAA4B,oCAAd,KAAc;;AAAA;;AACzF,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,WAAL,GAAmB,WAAnB;AACA,aAAK,GAAL,GAAW,IAAI,iBAAI,GAAR,CAAY;AACnB,yBAAa,QAAQ,GAAR,CAAY,iBAAZ,IAAiC,IAAI,WAD/B;AAEnB,6BAAiB,QAAQ,GAAR,CAAY,qBAAZ,IAAqC,IAAI,eAFvC;AAGnB,oBAAQ,QAAQ,GAAR,CAAY,cAAZ,IAA8B,IAAI,MAAlC,IAA4C;AAHjC,SAAZ,CAAX;AAKA,mBAAQ,YAAR,CAAqB,KAAK,GAA1B;AACH;;;;;;;;;;;;;;iFASU,I,EAAM,O;oBACP,I,EACF,Q,EACA,Q,EAIA,S,kFAcK,M,EACC,E;;;;;;AArBJ,oC,GAAO,E;;uCACQ,KAAK,QAAL,CAAc,IAAd,C;;;AAAjB,wC;AACA,wC,GAAW,sBAAS,MAAT,CAAgB;AACvB,yCAAK,KAAK,GADa;AAEvB;AAFuB,iCAAhB,C;AAIX,yC,GAAY,IAAI,IAAJ,GAAW,OAAX,E;;;AAEhB,oCAAI,CAAC,MAAM,OAAN,CAAc,OAAd,CAAL,EAA6B;AACzB,8CAAU,CAAE,OAAF,CAAV;AACH;;sCAEG,QAAQ,MAAR,KAAmB,C;;;;;iEAEZ;AACH;;AAAA,wCADG;AAEH;AAFG,iC;;;;;;;;;AAMX,iDAAmB,OAAnB,uHAA4B;AAAnB,0CAAmB;AAClB,sCADkB,GACb,OAAO,EAAP,IAAa,eAAK,EAAL,EADA;;AAExB,yCAAK,IAAL,CAAU;AACN,8CADM;AAEN,8CAAM,KAAK,SAAL,CAAe,MAAf,CAFA;AAGN,2DAAmB;AACf,gDAAI,EAAE,UAAU,QAAZ,EAAsB,aAAa,EAAnC;AADW;AAHb,qCAAV;AAOH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAIS,KAAK,SAAL,CAAe,QAAf,EAAyB,IAAzB,C;;;iEACC;AACH,8CADG;AAEH;AAFG,iC;;;;;sCAKD,oBAAa,YAAM,OAAnB,EAA4B,KAA5B,EAAmC,MAAnC,c;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAWE,I,EAAM,M;oBAEZ,a,EAYF,Q,EACA,Q;;;;;AAdJ,yCAAS,UAAW,UAAC,OAAD,EAAU,IAAV,EAAmB;AAAE;AAAS,iCAAlD;;AACM,6C,GAAgB,SAAhB,aAAgB,CAAC,OAAD,EAAU,IAAV,EAAmB;AACjC,wCAAI;AACA,4CAAM,SAAS,KAAK,KAAL,CAAW,QAAQ,IAAnB,CAAf;AACA,gDAAQ,iBAAR,GAA4B,QAAQ,iBAAR,IAA6B,EAAE,IAAI,EAAE,aAAa,eAAK,EAAL,EAAf,EAAN,EAAzD;AACA,+CAAO,kBAAP,GAA4B,QAAQ,iBAAR,CAA0B,EAA1B,CAA6B,WAAzD;AACA,+CAAO,MAAP,EAAe,IAAf;AACH,qCALD,CAKE,OAAO,GAAP,EAAY;;;AAGV;AACH;AACJ,iC;;;uCACgB,KAAK,QAAL,CAAc,IAAd,C;;;AAAjB,wC;AACA,wC,GAAW,0BAAa;AACpB,yCAAK,KAAK,GADU;AAEpB,sDAFoB;AAGpB,gEAHoB;AAIpB,+CAAW,EAJS;AAKpB,uDAAmB,CAAE,IAAF;AALC,iCAAb,C;;AAOf,yCAAS,EAAT,CAAY,OAAZ,EAAqB,UAAC,KAAD,EAAW;AAAE,0CAAM,IAAI,KAAJ,CAAU,MAAM,OAAhB,EAAyB,KAAzB,EAAgC,WAAhC,EAA6C,KAA7C,CAAN;AAA4D,iCAA9F;kEACO,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;kFASI,I;oBAEL,I,EACF,S,EACA,Q,EAGU,O;;;;;AANd,uCAAO,KAAK,WAAL,GAAmB,IAAnB,GAA0B,CAAG,KAAK,MAAR,SAAkB,IAAlB,SAA0B,KAAK,MAA/B,EAAwC,WAAxC,EAAjC;;uCACmB,KAAK,GAAL,CAAS,eAAT,CAAyB,EAAE,iBAAiB,IAAnB,EAAzB,C;;;AAAb,oC;AACF,yC,GAAY,KAAK,SAAL,IAAkB,E;AAC9B,wC,GAAW,UAAU,MAAV,CAAiB,UAAC,GAAD,EAAS;AAAE,2CAAO,IAAI,OAAJ,CAAY,IAAZ,KAAqB,CAA5B;AAAgC,iCAA5D,C;;sCACX,UAAU,MAAV,KAAqB,CAArB,IAA0B,SAAS,MAAT,KAAoB,C;;;;;;;uCAEpB,KAAK,GAAL,CAAS,gBAAT,CAA0B;AAC5C,+CAAW;AADiC,iCAA1B,C;;;AAAhB,uC;kEAIC,QAAQ,Q;;;;;sCAGT,oBAAa,aAAM,OAAnB,EAA4B,KAA5B,EAAmC,UAAnC,e;;;kEAGP,SAAS,GAAT,E;;;;;;;;;;;;;;;;;;;;;;;;;;kFAQO,Q;;;;;;uCACR,KAAK,GAAL,CAAS,gBAAT,CAA0B;AAC5B,8CAAU;AADkB,iCAA1B,C;;;;;;;;;;;;;;;;;;;;;;;;;;kCAWA,Q,EAAU,Q,EAAU;AAC1B,gBAAI,CAAC,MAAM,OAAN,CAAc,QAAd,CAAL,EAA8B;AAC1B,2BAAW,CAAE,QAAF,CAAX;AACH;AACD,mBAAO,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,yBAAS,IAAT,CAAc,QAAd,EAAwB,UAAC,GAAD,EAAS;AAC7B,wBAAI,GAAJ,EAAS;AACL,+BAAO,OAAO,GAAP,CAAP;AACH;AACD,4BAAQ,IAAR;AACH,iBALD;AAMH,aAPM,CAAP;AAQH;;;;;;kBA7JgB,G","file":"sqs.js","sourcesContent":["/** @module Sqs*/\n\nimport Consumer from 'sqs-consumer';\nimport Producer from 'sqs-producer';\nimport { SqsError } from './error';\nimport Promise from 'bluebird';\nimport AWS from 'aws-sdk';\nimport uuid from 'uuid';\n\n/** Class representing Sqs */\nexport default class Sqs {\n    /**\n     * Constructs Sqs\n     *\n     * @param {String} name - The queue name.\n     */\n    constructor(prefix = 'hooq', suffix = 'development', { aws = {}, useNameOnly = false } = {}) {\n        this.prefix = prefix;\n        this.suffix = suffix;\n        this.useNameOnly = useNameOnly;\n        this.sqs = new AWS.SQS({\n            accessKeyId: process.env.AWS_ACCESS_KEY_ID || aws.accessKeyId,\n            secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || aws.secretAccessKey,\n            region: process.env.AWS_SQS_REGION || aws.region || 'ap-southeast-1'\n        });\n        Promise.promisifyAll(this.sqs);\n    }\n\n    /**\n     * Pushes the data to named queue.\n     *\n     * @param {String} name - The queue name.\n     * @param {Array|Object} records - The payload.\n     * returns {Object} The data and timestamp.\n     */\n    async push(name, records) {\n        const data = [],\n            queueUrl = await this.queueUrl(name),\n            producer = Producer.create({\n                sqs: this.sqs,\n                queueUrl\n            }),\n            timestamp = new Date().valueOf();\n\n        if (!Array.isArray(records)) {\n            records = [ records ];\n        }\n\n        if (records.length === 0) {\n            // ignores empty records\n            return {\n                data,\n                timestamp\n            };\n        }\n\n        for (let record of records) {\n            const id = record.id || uuid.v4();\n            data.push({\n                id,\n                body: JSON.stringify(record),\n                messageAttributes: {\n                    id: { DataType: 'String', StringValue: id }\n                }\n            });\n        }\n\n        // sends the data to queue url\n        try {\n            await this.sendAsync(producer, data);\n            return {\n                data,\n                timestamp\n            };\n        } catch (error) {\n            throw new SqsError(error.message, 50001, 'push', error);\n        }\n    }\n\n    /**\n     * Subscribes to a queue.\n     *\n     * @param {String} name - The queue name.\n     * @param {Function} handle - The handle Body object function.\n     * @return {Consumer} The consumer object, can be stopped.\n     */\n    async subscribe(name, handle) {\n        handle = handle || ((message, done) => { done(); });\n        const handleMessage = (message, done) => {\n                try {\n                    const object = JSON.parse(message.Body);\n                    message.MessageAttributes = message.MessageAttributes || { id: { StringValue: uuid.v4() } };\n                    object.queueTransactionId = message.MessageAttributes.id.StringValue;\n                    handle(object, done);\n                } catch (err) {\n                    // FIXME: Log the error parsing of non json string\n                    // definitely we can ignore this\n                    done();\n                }\n            },\n            queueUrl = await this.queueUrl(name),\n            consumer = new Consumer({\n                sqs: this.sqs,\n                queueUrl,\n                handleMessage,\n                batchSize: 10,\n                messageAttributes: [ 'id' ]\n            });\n        consumer.on('error', (error) => { throw new Error(error.message, 50001, 'subscribe', error); });\n        return consumer;\n    }\n\n    /**\n     * Returns a valid sqs queue url.\n     *\n     * @param {String} name - The queue name.\n     * @return {String} The queue url.\n     */\n    async queueUrl(name) {\n        name = this.useNameOnly ? name : `${this.prefix}-${name}-${this.suffix}`.toLowerCase();\n        const list = await this.sqs.listQueuesAsync({ QueueNamePrefix: name }),\n            queueUrls = list.QueueUrls || [],\n            filtered = queueUrls.filter((url) => { return url.indexOf(name) >= 0; });\n        if (queueUrls.length === 0 || filtered.length === 0) {\n            try {\n                const created = await this.sqs.createQueueAsync({\n                    QueueName: name\n                });\n                // FIXME: when in PROD creates dead letter queue\n                return created.QueueUrl;\n            } catch (error) {\n                // FIXME: log the error\n                throw new SqsError(error.message, 50001, 'queueUrl', error);\n            }\n        }\n        return filtered.pop();\n    }\n\n    /**\n     * Removes a queue from SQS.\n     *\n     * @param {String} url - The queue url NOT name.\n     */\n    async removeQueue(queueUrl) {\n        await this.sqs.deleteQueueAsync({\n            QueueUrl: queueUrl\n        });\n    }\n\n    /**\n     * Sends the record to queue. This is a private API.\n     *\n     * @param {Producer} producer\n     * @param {Array|Object} producer\n     */\n    sendAsync(producer, messages) {\n        if (!Array.isArray(messages)) {\n            messages = [ messages ];\n        }\n        return new Promise((resolve, reject) => {\n            producer.send(messages, (err) => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(true);\n            });\n        });\n    }\n}\n"],"sourceRoot":"/Users/diorahman/Experiments/hooq/src/luigi/sqs/lib"}